/*
 * Project SmartREST
 * Copyright (c) Alessio Saltarin 2022.
 * This software is licensed under MIT License (see LICENSE)
 */

plugins {
	id "java"
	id "idea"
	id "org.springframework.boot" version "3.0.0"
	id "io.spring.dependency-management" version "1.0.11.RELEASE"
	id "org.jetbrains.kotlin.jvm" version "1.7.21"
	id "org.jetbrains.kotlin.plugin.spring" version "1.7.21"
	id "org.jetbrains.kotlin.plugin.jpa" version "1.7.21"
	id "org.jetbrains.kotlin.plugin.allopen" version "1.7.21"
	id "org.jetbrains.kotlin.plugin.noarg" version "1.7.21"
}

group = "net.littlelite"

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springboot_version"
	implementation "org.springframework.boot:spring-boot-starter-web:$springboot_version"
	implementation "org.springframework.boot:spring-boot-starter-freemarker:$springboot_version"
	implementation "org.springframework.boot:spring-boot-starter-hateoas:$springboot_version"
	implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
	implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
	implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	implementation 'org.hibernate:hibernate-validator:8.0.0.Final'
	testImplementation "org.springframework.boot:spring-boot-starter-test:$springboot_version"
	runtimeOnly("com.h2database:h2:$h2_version")
}

allOpen {
	annotation("javax.persistence.Entity")
	annotation("javax.persistence.Embeddable")
	annotation("javax.persistence.MappedSuperclass")
}

noArg {
	annotation("javax.persistence.Entity")
}

bootRun {
	jvmArgs = ["--add-opens=java.base/java.net=ALL-UNNAMED",
			   "--add-opens=java.base/java.lang=ALL-UNNAMED"]
}

test {
	jvmArgs = ["--add-opens=java.base/java.net=ALL-UNNAMED",
			   "--add-opens=java.base/java.lang=ALL-UNNAMED"]
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

compileJava {
	options.encoding = 'UTF-8'
	options.compilerArgs << '-parameters'
}

compileTestJava {
	options.encoding = 'UTF-8'
}

compileKotlin {
	kotlinOptions.jvmTarget = JavaVersion.VERSION_17
	kotlinOptions.javaParameters = true
}

compileTestKotlin {
	kotlinOptions.jvmTarget = JavaVersion.VERSION_17
}

test {
	useJUnitPlatform()
}



