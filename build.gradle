/*
 * Project SmartREST
 * Copyright (c) Alessio Saltarin 2021.
 * This software is licensed under MIT License (see LICENSE)
 */

plugins {
	id "java"
	id "idea"
	id "org.springframework.boot" version "2.5.5"
	id "io.spring.dependency-management" version "1.0.10.RELEASE"
	id "org.jetbrains.kotlin.jvm" version "1.5.31"
	id "org.jetbrains.kotlin.plugin.spring" version "1.5.31"
	id "org.jetbrains.kotlin.plugin.jpa" version "1.5.31"
	id "org.jetbrains.kotlin.plugin.allopen" version "1.5.31"
	id "org.jetbrains.kotlin.plugin.noarg" version "1.5.31"
}

group = "net.littlelite"

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springboot_version"
	implementation "org.springframework.boot:spring-boot-starter-web:$springboot_version"
	implementation("org.springframework.boot:spring-boot-starter-freemarker:$springboot_version")
	implementation("org.springframework.boot:spring-boot-starter-hateoas:$springboot_version")
	implementation("org.springframework.boot:spring-boot-starter-validation:$springboot_version")
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
	implementation('org.springframework.plugin:spring-plugin-core:2.0.0.RELEASE')
	implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.13.0")
	implementation("org.springdoc:springdoc-openapi-ui:1.6.4")
	implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
	testImplementation("org.springframework.boot:spring-boot-starter-test:$springboot_version") {
		exclude group: "org.junit.vintage", module: "junit-vintage-engine"
	}
	runtimeOnly("com.h2database:h2:$h2_version")
}

allOpen {
	annotation("javax.persistence.Entity")
	annotation("javax.persistence.Embeddable")
	annotation("javax.persistence.MappedSuperclass")
}

noArg {
	annotation("javax.persistence.Entity")
}

bootRun {
	jvmArgs = ["--add-opens=java.base/java.net=ALL-UNNAMED",
			   "--add-opens=java.base/java.lang=ALL-UNNAMED"]
}

test {
	jvmArgs = ["--add-opens=java.base/java.net=ALL-UNNAMED",
			   "--add-opens=java.base/java.lang=ALL-UNNAMED"]
}

java {
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

compileJava {
	options.encoding = 'UTF-8'
	options.compilerArgs << '-parameters'
}

compileTestJava {
	options.encoding = 'UTF-8'
}

compileKotlin {
	kotlinOptions.jvmTarget = JavaVersion.VERSION_11
	kotlinOptions.javaParameters = true
}

compileTestKotlin {
	kotlinOptions.jvmTarget = JavaVersion.VERSION_11
}

test {
	useJUnitPlatform()
}



